assignment 6 huawei internship
Vaishnavi Srec IT

1.Abstraction

import java.util.*;
import java.io.*;
abstract class Mobile
{
    Mobile()
    {
        System.out.println("Mobile is base class");
    }
    abstract void run();
    void dialno()
    {
        System.out.println("Number are dialled");
    }
}
class Nokia extends  Mobile
{
    void run()
    {
        System.out.println("Nokia is derived class");
    }
}
class Abstract
{
    public static void main(String args[])
    {
        Mobile obj=new Nokia();
        obj.run();
        obj.dialno();
    }
}

o/p: Mobile is base class
Nokia is derived class
Number are dialled

2.Interface

interface money
{
    void operation();
}
class Debit implements money
{
    public void operation()
    {
        System.out.println("Debiting money from account");
    }
}
class credit implements money
{
    public void operation()
    {
        System.out.println("crediting the money to account");
    }
}
class Interface
{
    public static void main(String args[])
    {
        money d=new credit();
        d.operation();
    }
}

o/p : crediting the money to account

3.Collection framework

ArrayList

import java.util.ArrayList;  
 public class Arraylist{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();   
      list.add("1");  
      list.add("2");    
      list.add("3");    
      list.add("4");    
      System.out.println(list);  
 }  
}  

o/p: [1, 2, 3, 4]

Hashset

import java.util.*;  
class HashSet1{  
 public static void main(String args[]){  
    HashSet<String> set=new HashSet();  
           set.add("1");    
           set.add("2");    
           set.add("3");   
           set.add("4");  
           set.add("5");  
           Iterator<String> i=set.iterator();  
           while(i.hasNext())  
           {  
           System.out.println(i.next());  
           }  
 }  
}  

o/p : 1
2
3
4
5

4.polymorphism

class man
{
    void pay()
    {
        System.out.println("Paying bill");
    }
}
class millionaire extends man
{
    void pay()
    {
        System.out.println("Millionaire is paying bill & giving tip");
    }
}
class polymorphism
{
    public static void main(String args[])
    {
        man obj=new millionaire();
        obj.pay();
    }
}

o/p : Millionaire is paying bill & giving tip


